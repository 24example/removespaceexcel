name: Release Build

on:
  push:
    tags:
      - "v*" # Триггер на теги, начинающиеся с 'v'

permissions:
  contents: write # Разрешение на создание релизов

jobs:
  build:
    name: Build Release
    runs-on: self-hosted
    strategy:
      matrix:
        include:
          - os: windows
            arch: amd64
            ext: .exe
            gui: true
          - os: windows
            arch: arm64
            ext: .exe
            gui: true
          - os: darwin
            arch: amd64
            ext: ""
            gui: true
          - os: darwin
            arch: arm64
            ext: ""
            gui: true
          - os: linux
            arch: amd64
            ext: ""
            gui: true
          - os: linux
            arch: arm64
            ext: ""
            gui: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.2"
          cache: false

      - name: Get version
        id: get_version
        shell: bash
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo@latest
          go install github.com/akavel/rsrc@latest

      - name: Generate Windows resources
        if: matrix.os == 'windows'
        run: |
          # Обновляем версию в файле
          sed -i "s/\"ProductVersion\": \".*\"/\"ProductVersion\": \"$VERSION\"/" assets/versioninfo.json
          sed -i "s/\"FileVersion\": \"\"/\"FileVersion\": \"$VERSION\"/" assets/versioninfo.json

          # Генерируем .syso файл для соответствующей архитектуры
          goversioninfo -platform-specific=true -manifest=assets/excel-cleaner.manifest -icon=assets/icon.ico -o=resource_windows_${{ matrix.arch }}.syso assets/versioninfo.json

      - name: Build
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          VERSION: ${{ steps.get_version.outputs.VERSION }}
          CGO_ENABLED: 0
        run: |
          OUTPUT_NAME="excel-cleaner-${{ steps.get_version.outputs.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}"

          # Определяем базовые флаги линковщика
          LDFLAGS="-s -w -X 'main.Version=${VERSION}'"

          # Добавляем флаг GUI для Windows
          if [ "${{ matrix.os }}" = "windows" ] && [ "${{ matrix.gui }}" = "true" ]; then
            LDFLAGS="$LDFLAGS -H=windowsgui"
          fi

          if [ "${{ matrix.os }}" = "darwin" ]; then
            go build -v -trimpath -tags "!console" -ldflags="${LDFLAGS}" -o "excel-cleaner${{ matrix.ext }}"
            
            # Создаем .app bundle для macOS
            APP_NAME="Excel Cleaner.app"
            mkdir -p "${APP_NAME}/Contents/MacOS"
            mkdir -p "${APP_NAME}/Contents/Resources"
            cp excel-cleaner "${APP_NAME}/Contents/MacOS/"
            cp assets/icon.icns "${APP_NAME}/Contents/Resources/"
            
            # Копируем и обновляем Info.plist
            cp assets/Info.plist "${APP_NAME}/Contents/"
            if [[ "$OSTYPE" == "darwin"* ]]; then
              sed -i '' "s/CURRENT_VERSION/${VERSION}/g" "${APP_NAME}/Contents/Info.plist"
            else
              sed -i "s/CURRENT_VERSION/${VERSION}/g" "${APP_NAME}/Contents/Info.plist"
            fi
            
            # Подписываем приложение если есть сертификат
            if [ -n "$APPLE_DEVELOPER_CERTIFICATE" ]; then
              codesign --force --sign "$APPLE_DEVELOPER_CERTIFICATE" --options runtime "${APP_NAME}"
            fi
            
            zip -r "${OUTPUT_NAME}.zip" "${APP_NAME}" README.md LICENSE
          elif [ "${{ matrix.os }}" = "linux" ]; then
            go build -v -trimpath -tags "!console" -ldflags="${LDFLAGS}" -o "excel-cleaner${{ matrix.ext }}"
            
            # Копируем файлы для Linux
            cp assets/excel-cleaner.desktop .
            cp assets/install-linux.sh install.sh
            chmod +x install.sh
            
            # Копируем иконку
            cp assets/icon.png excel-cleaner.png
            
            zip "${OUTPUT_NAME}.zip" "excel-cleaner${{ matrix.ext }}" excel-cleaner.desktop excel-cleaner.png install.sh README.md LICENSE
          else
            # Windows
            go build -v -trimpath -tags "!console" -ldflags="${LDFLAGS}" -o "excel-cleaner${{ matrix.ext }}"
            zip "${OUTPUT_NAME}.zip" "excel-cleaner${{ matrix.ext }}" README.md LICENSE
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: excel-cleaner-${{ matrix.os }}-${{ matrix.arch }}
          path: excel-cleaner-${{ steps.get_version.outputs.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}.zip
          retention-days: 1
          compression-level: 0

  create-release:
    name: Create Release
    needs: build
    runs-on: self-hosted
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/excel-cleaner-*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
